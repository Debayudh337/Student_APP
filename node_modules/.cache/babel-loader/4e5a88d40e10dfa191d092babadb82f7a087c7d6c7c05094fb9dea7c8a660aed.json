{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\reactProjects\\\\Student_APP\\\\src\\\\Phone.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './Phone.css';\nimport countries from './Countries'; // Import the countries array\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Phone = ({\n  setValidPhone\n}) => {\n  _s();\n  const [selectedCountry, setSelectedCountry] = useState(countries[0]);\n  const [phoneNumber, setPhoneNumber] = useState('');\n\n  // Validate phone number (example: minimum length of 10)\n  const validatePhoneNumber = number => {\n    const phoneRegex = /^[0-9]{10,15}$/; // Basic phone number validation for digits and length\n    return phoneRegex.test(number);\n  };\n  const handlePhoneChange = e => {\n    const newPhoneNumber = e.target.value;\n    setPhoneNumber(newPhoneNumber);\n\n    // Validate phone and communicate to parent\n    if (validatePhoneNumber(newPhoneNumber)) {\n      setValidPhone(true);\n    } else {\n      setValidPhone(false);\n    }\n  };\n  const handleCountryChange = event => {\n    const selectedCode = event.target.value;\n    const country = countries.find(country => country.code === selectedCode);\n    setSelectedCountry(country);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"phone-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"country-flag\",\n      children: /*#__PURE__*/_jsxDEV(\"img\", {\n        src: selectedCountry.flag,\n        alt: `${selectedCountry.name} Flag`\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"country-code\",\n      children: /*#__PURE__*/_jsxDEV(\"select\", {\n        value: selectedCountry.code,\n        onChange: handleCountryChange,\n        children: countries.map(country => /*#__PURE__*/_jsxDEV(\"option\", {\n          value: country.code,\n          children: [country.name, \" (\", country.code, \")\"]\n        }, country.code, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 39,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"phone-number\",\n      children: /*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"tel\",\n        placeholder: \"Phone Number\",\n        value: phoneNumber,\n        onChange: handlePhoneChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 48,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 34,\n    columnNumber: 5\n  }, this);\n};\n_s(Phone, \"CLAqe00YNVOrwvnv+f6qJVbu38s=\");\n_c = Phone;\nexport default Phone;\nvar _c;\n$RefreshReg$(_c, \"Phone\");","map":{"version":3,"names":["React","useState","countries","jsxDEV","_jsxDEV","Phone","setValidPhone","_s","selectedCountry","setSelectedCountry","phoneNumber","setPhoneNumber","validatePhoneNumber","number","phoneRegex","test","handlePhoneChange","e","newPhoneNumber","target","value","handleCountryChange","event","selectedCode","country","find","code","className","children","src","flag","alt","name","fileName","_jsxFileName","lineNumber","columnNumber","onChange","map","type","placeholder","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/reactProjects/Student_APP/src/Phone.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './Phone.css';\r\nimport countries from './Countries'; // Import the countries array\r\n\r\nconst Phone = ({ setValidPhone }) => {\r\n  const [selectedCountry, setSelectedCountry] = useState(countries[0]);\r\n  const [phoneNumber, setPhoneNumber] = useState('');\r\n\r\n  // Validate phone number (example: minimum length of 10)\r\n  const validatePhoneNumber = (number) => {\r\n    const phoneRegex = /^[0-9]{10,15}$/; // Basic phone number validation for digits and length\r\n    return phoneRegex.test(number);\r\n  };\r\n\r\n  const handlePhoneChange = (e) => {\r\n    const newPhoneNumber = e.target.value;\r\n    setPhoneNumber(newPhoneNumber);\r\n\r\n    // Validate phone and communicate to parent\r\n    if (validatePhoneNumber(newPhoneNumber)) {\r\n      setValidPhone(true);\r\n    } else {\r\n      setValidPhone(false);\r\n    }\r\n  };\r\n\r\n  const handleCountryChange = (event) => {\r\n    const selectedCode = event.target.value;\r\n    const country = countries.find((country) => country.code === selectedCode);\r\n    setSelectedCountry(country);\r\n  };\r\n\r\n  return (\r\n    <div className=\"phone-container\">\r\n      <div className=\"country-flag\">\r\n        <img src={selectedCountry.flag} alt={`${selectedCountry.name} Flag`} />\r\n      </div>\r\n      <div className=\"country-code\">\r\n        <select value={selectedCountry.code} onChange={handleCountryChange}>\r\n          {countries.map((country) => (\r\n            <option key={country.code} value={country.code}>\r\n              {country.name} ({country.code})\r\n            </option>\r\n          ))}\r\n        </select>\r\n      </div>\r\n      <div className=\"phone-number\">\r\n        <input\r\n          type=\"tel\"\r\n          placeholder=\"Phone Number\"\r\n          value={phoneNumber}\r\n          onChange={handlePhoneChange}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Phone;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}