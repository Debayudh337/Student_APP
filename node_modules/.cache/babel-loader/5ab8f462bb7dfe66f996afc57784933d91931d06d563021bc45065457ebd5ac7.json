{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\User\\\\OneDrive\\\\Desktop\\\\reactProjects\\\\Student_APP\\\\src\\\\FullName.jsx\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './FullName.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst FullName = ({\n  setValidName\n}) => {\n  _s();\n  const [fullName, setFullName] = useState('');\n  const [errors, setErrors] = useState('');\n\n  // Basic full name validation\n  const validateFullName = name => {\n    // Must contain at least two words (first and last name)\n    const nameParts = name.trim().split(' ');\n    if (nameParts.length < 2) {\n      return 'Please enter both first and last name.';\n    }\n\n    // Ensure that only alphabetic characters and spaces are used\n    const nameRegex = /^[A-Za-z\\s]+$/;\n    if (!nameRegex.test(name)) {\n      return 'Name must contain only alphabetic characters and spaces.';\n    }\n    return ''; // No errors\n  };\n  const handleNameChange = e => {\n    const newName = e.target.value;\n    setFullName(newName);\n    const errorMessage = validateFullName(newName);\n    setErrors(errorMessage);\n\n    // If there's no error, name is valid\n    setValidName(!errorMessage);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"fullname-container\",\n    children: [/*#__PURE__*/_jsxDEV(\"input\", {\n      className: \"fullname-input\",\n      type: \"text\",\n      placeholder: \"Enter your full name\",\n      value: fullName,\n      onChange: handleNameChange\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), errors && /*#__PURE__*/_jsxDEV(\"p\", {\n      className: \"fullname-error\",\n      children: errors\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 18\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 37,\n    columnNumber: 5\n  }, this);\n};\n_s(FullName, \"pQ2xQSZjAX/T534Lmt6oqt7z8JY=\");\n_c = FullName;\nexport default FullName;\nvar _c;\n$RefreshReg$(_c, \"FullName\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","FullName","setValidName","_s","fullName","setFullName","errors","setErrors","validateFullName","name","nameParts","trim","split","length","nameRegex","test","handleNameChange","e","newName","target","value","errorMessage","className","children","type","placeholder","onChange","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/User/OneDrive/Desktop/reactProjects/Student_APP/src/FullName.jsx"],"sourcesContent":["import React, { useState } from 'react';\r\nimport './FullName.css';\r\n\r\nconst FullName = ({ setValidName }) => {\r\n  const [fullName, setFullName] = useState('');\r\n  const [errors, setErrors] = useState('');\r\n\r\n  // Basic full name validation\r\n  const validateFullName = (name) => {\r\n    // Must contain at least two words (first and last name)\r\n    const nameParts = name.trim().split(' ');\r\n    if (nameParts.length < 2) {\r\n      return 'Please enter both first and last name.';\r\n    }\r\n\r\n    // Ensure that only alphabetic characters and spaces are used\r\n    const nameRegex = /^[A-Za-z\\s]+$/;\r\n    if (!nameRegex.test(name)) {\r\n      return 'Name must contain only alphabetic characters and spaces.';\r\n    }\r\n\r\n    return ''; // No errors\r\n  };\r\n\r\n  const handleNameChange = (e) => {\r\n    const newName = e.target.value;\r\n    setFullName(newName);\r\n\r\n    const errorMessage = validateFullName(newName);\r\n    setErrors(errorMessage);\r\n\r\n    // If there's no error, name is valid\r\n    setValidName(!errorMessage);\r\n  };\r\n\r\n  return (\r\n    <div className=\"fullname-container\">\r\n      <input\r\n        className=\"fullname-input\"\r\n        type=\"text\"\r\n        placeholder=\"Enter your full name\"\r\n        value={fullName}\r\n        onChange={handleNameChange}\r\n      />\r\n      {errors && <p className=\"fullname-error\">{errors}</p>}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default FullName;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,gBAAgB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAExB,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAa,CAAC,KAAK;EAAAC,EAAA;EACrC,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGP,QAAQ,CAAC,EAAE,CAAC;EAC5C,MAAM,CAACQ,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;;EAExC;EACA,MAAMU,gBAAgB,GAAIC,IAAI,IAAK;IACjC;IACA,MAAMC,SAAS,GAAGD,IAAI,CAACE,IAAI,CAAC,CAAC,CAACC,KAAK,CAAC,GAAG,CAAC;IACxC,IAAIF,SAAS,CAACG,MAAM,GAAG,CAAC,EAAE;MACxB,OAAO,wCAAwC;IACjD;;IAEA;IACA,MAAMC,SAAS,GAAG,eAAe;IACjC,IAAI,CAACA,SAAS,CAACC,IAAI,CAACN,IAAI,CAAC,EAAE;MACzB,OAAO,0DAA0D;IACnE;IAEA,OAAO,EAAE,CAAC,CAAC;EACb,CAAC;EAED,MAAMO,gBAAgB,GAAIC,CAAC,IAAK;IAC9B,MAAMC,OAAO,GAAGD,CAAC,CAACE,MAAM,CAACC,KAAK;IAC9Bf,WAAW,CAACa,OAAO,CAAC;IAEpB,MAAMG,YAAY,GAAGb,gBAAgB,CAACU,OAAO,CAAC;IAC9CX,SAAS,CAACc,YAAY,CAAC;;IAEvB;IACAnB,YAAY,CAAC,CAACmB,YAAY,CAAC;EAC7B,CAAC;EAED,oBACErB,OAAA;IAAKsB,SAAS,EAAC,oBAAoB;IAAAC,QAAA,gBACjCvB,OAAA;MACEsB,SAAS,EAAC,gBAAgB;MAC1BE,IAAI,EAAC,MAAM;MACXC,WAAW,EAAC,sBAAsB;MAClCL,KAAK,EAAEhB,QAAS;MAChBsB,QAAQ,EAAEV;IAAiB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC5B,CAAC,EACDxB,MAAM,iBAAIN,OAAA;MAAGsB,SAAS,EAAC,gBAAgB;MAAAC,QAAA,EAAEjB;IAAM;MAAAqB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAClD,CAAC;AAEV,CAAC;AAAC3B,EAAA,CA5CIF,QAAQ;AAAA8B,EAAA,GAAR9B,QAAQ;AA8Cd,eAAeA,QAAQ;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}